<#
.SYNOPSIS
    Retrieves and evaluates the Configuration Manager (CCM) client health status on one or more remote computers.

.DESCRIPTION
    The `Get-CCMClientHealth` function connects to specified remote computers, retrieves the health status of the Configuration Manager client,
    and outputs a summary of the health check. This function requires the computer name(s) and credentials for access.

    This function performs the following:
    - Establishes a CIM session on each specified computer to retrieve client information.
    - Executes a client health evaluation using the `ccmeval.exe` utility on the remote machine.
    - Reads and parses the `CcmEvalReport.xml` file to gather detailed health check information.

.PARAMETER ComputerName
    Specifies the name(s) of the computer(s) on which to check the CCM client health. This parameter is mandatory.

.PARAMETER Credential
    Specifies a user credential with administrative access to the target computers. This parameter is mandatory.

.OUTPUTS
    Custom output generated by the `CCMEval` class, providing information on the client status, health check summary, and detailed health check results.

.EXAMPLE
    PS C:\> Get-CCMClientHealth -ComputerName "Computer1", "Computer2" -Credential (Get-Credential)

    Retrieves the Configuration Manager client health status for "Computer1" and "Computer2" using the specified credentials.

.NOTES
    Author: Jonathon Sissom
    Date: 11/06/2024
    Version: 1.01

    This function uses CIM sessions and remote commands to gather client health data from remote systems. 
    Ensure that the `SMS_Client` class is available on the remote computer.

#>
function Get-CCMClientHealth {
    [CmdletBinding()]
    param (
        # Parameter help description
        [Parameter(Mandatory)]
        [string[]]
        $ComputerName,
        # Parameter help description
        [Parameter(Mandatory)]
        [pscredential]
        $Credential
    )
    
    begin {
            class CCMEval {
                [Client]$Client
                [HealthCheckSummary]$Summary
                [HealthCheckResult[]]$HealthChecks
            
                # Constructor for CCMEval
                CCMEval([CimInstance]$smsClient, [object]$healthCheckSummary, [System.Xml.XmlElement[]]$healthChecks) {
                    # Initialize Client object
                    $this.Client = [Client]::new($smsClient)
            
                    # Initialize HealthCheckSummary object
                    $this.Summary = [HealthCheckSummary]::new($healthCheckSummary)
            
                    # Initialize HealthChecks array with HealthCheckResult objects
                    $this.HealthChecks = $healthChecks | ForEach-Object { [HealthCheckResult]::new($_) }
                }

                # Returns a structured custom object for detailed information
                [PSCustomObject] ToStructuredOutput() {
                    return [pscustomobject]@{
                        ClientInfo = [pscustomobject]@{
                            ComputerName = $this.Client.ComputerName
                            Version = $this.Client.Version
                            Type = $this.Client.Type
                            AllowLocalAdminOverride = $this.Client.AllowLocalAdminOveride
                            EnableAutoAssignment = $this.Client.EnableAutoAssignment
                        }
                        HealthCheckSummary = [pscustomobject]@{
                            EvaluationDate = $this.Summary.EvaluationDate
                            Version = $this.Summary.Version
                            Result = $this.Summary.Result
                        }
                        HealthChecks = $this.HealthChecks | ForEach-Object {
                            [pscustomobject]@{
                                ID = $_.ID
                                Description = $_.Description
                                ResultCode = $_.ResultCode
                                ResultType = $_.ResultType
                                ResultDetail = $_.ResultDetail
                                StepDetail = $_.StepDetail
                                ResultStatus = $_.ResultStatus
                            }
                        }
                    }
                }

                # Returns a JSON representation for easy integration with other tools
                [string] ToJson() {
                    return (ConvertTo-Json -InputObject $this.ToStructuredOutput() -Depth 10)
                }

                # Returns a brief summary of health check status
                [pscustomobject] GetSummary() {
                    return [PSCustomObject]@{
                        ComputerName = $this.Client.ComputerName
                        ClientVersion = $this.Client.Version.ToString()
                        EvaluationDate = $this.Summary.EvaluationDate
                        Version = $this.Summary.Version.ToString()
                        Result = $this.Summary.Result
                    }
                }

                # ToString method to format output
                [string] ToString() {
                    $output = @()
                    $output += "Client Info:"
                    $output += "--------------------------"
                    $output += "Computer Name: $($this.Client.ComputerName)"
                    $output += "Client Version: $($this.Client.Version)"
                    $output += "Client Type: $($this.Client.Type)"
                    $output += "Allow Local Admin Override: $($this.Client.AllowLocalAdminOveride)"
                    $output += ""
                    $output += "Health Check Summary:"
                    $output += "--------------------------"
                    $output += "Evaluation Date: $($this.Summary.EvaluationDate)"
                    $output += "Summary Result: $($this.Summary.Result)"
                    $output += "Summary Version: $($this.Summary.Version)"

                    return $output -join "`n"
                }
            }
            class Client {
                [bool]$AllowLocalAdminOveride
                [int]$Type
                [version]$Version
                [bool]$EnableAutoAssignment
                [string]$ComputerName

                Client([CimInstance]$smsClient){
                    $this.AllowLocalAdminOveride = $smsClient.AllowLocalAdminOverride
                    $this.Type = $smsClient.ClientType
                    $this.Version = $smsClient.ClientVersion
                    $this.EnableAutoAssignment = $smsClient.EnableAutoAssignment
                    $this.ComputerName = $smsClient.PSComputerName
                }
            }
            class HealthCheckSummary {
                [datetime]$EvaluationDate
                [version]$Version
                [string]$Result

                HealthCheckSummary([object[]]$healthCheckSummary){
                    $this.EvaluationDate = $healthCheckSummary.EvaluationTime
                    $this.Version = $healthCheckSummary.Version
                    $this.Result = $healthCheckSummary.'#text'
                }
            }
            class HealthCheckResult {
                [string]$ID
                [string]$Description
                [int]$ResultCode
                [int]$ResultType
                [string]$ResultDetail
                [string]$StepDetail
                [string]$ResultStatus

                HealthCheckResult([System.Xml.XmlElement]$healthCheck) {
                    # Extract values from the XML element
                    $this.ID = $healthCheck.ID
                    $this.Description = $healthCheck.Description
                    $this.ResultCode = [int]$healthCheck.ResultCode
                    $this.ResultType = [int]$healthCheck.ResultType
                    $this.ResultDetail = $healthCheck.ResultDetail
                    $this.StepDetail = $healthCheck.StepDetail
                    # Map '#text' to ResultStatus
                    $this.ResultStatus = $healthCheck.'#text'
                }
            }
    }
    
    process {
        $results = @()
        foreach ($Computer in $ComputerName) {
            try {
                Write-Verbose "Connecting to $Computer"
                $cimSession = New-CimSession -ComputerName $Computer -Credential $Credential -ErrorAction Stop

                $smsClient = Get-CimInstance -Namespace "root/ccm" -ClassName SMS_Client -CimSession $cimSession
                if (-not $smsClient) {
                    Write-Warning "SMS_Client class not found on $Computer"
                    continue
                }

                # Get local SMS path and check for required files
                $localSMSPath = (Invoke-Command -ComputerName $Computer -Credential $Credential -ScriptBlock {
                    Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\SMS\Client\Configuration\Client Properties"
                })."Local SMS Path"

                $ccmEvalPath = "${localSMSPath}ccmeval.exe"
                $ccmEvalReportPath = "${localSMSPath}CcmEvalReport.xml"
                
                if (!(Test-Path -Path $ccmEvalPath)) {
                    Write-Warning "ccmeval.exe not found on $Computer"
                    continue
                }

                Write-Verbose "Executing CCM evaluation on $Computer"
                Invoke-Command -ComputerName $Computer -Credential $Credential -ScriptBlock {
                    Start-Process -FilePath $using:ccmEvalPath -NoNewWindow -Wait
                } -ErrorAction Stop

                if (!(Test-Path -Path $ccmEvalReportPath)) {
                    Write-Warning "CcmEvalReport.xml not found on $Computer after evaluation"
                    continue
                }

                [xml]$ccmEvalReport = Invoke-Command -ComputerName $Computer -Credential $Credential -ScriptBlock {
                    Get-Content -Path $using:ccmEvalReportPath
                } -ErrorAction Stop

                [object[]]$ccmHealthChecks = $ccmEvalReport.ClientHealthReport.HealthChecks.HealthCheck
                [object[]]$ccmHealthCheckSummary = $ccmEvalReport.ClientHealthReport.Summary

                $ccmEval = [CCMEval]::new($smsClient, $ccmHealthCheckSummary, $ccmHealthChecks)
                $results += $ccmEval
            }
            catch {
                Write-Error "Failed to retrieve client health status for $Computer : $_"
            }
            finally {
                if ($cimSession) {
                    $cimSession | Remove-CimSession
                }
            }
        }   
    }
    
    end {
        $results | ForEach-Object {
            $_.GetSummary()
            if ($_.Summary.Result -ne "Passed"){
                $_.HealthChecks | Foreach-Object {
                    if ($_.ResultCode -ne 0){
                        Write-Output $_
                    }
                } 
            }
        }

        if ($PSCmdlet.MyInvocation.BoundParameters["OutVariable"]) {
            $OutVariableName = $PSCmdlet.MyInvocation.BoundParameters["OutVariable"]
            Set-Variable -Name $OutVariableName -Value $results -Scope 1 -Option AllScope
        }
    }
}